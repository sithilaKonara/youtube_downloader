name: 'Terraform_Apply'

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    - name: Create virtual environment
      run: python -m venv venv
    
    - name: Install Pytube
      run: |
        ls -al
        source venv/bin/activate
        pip install pytube
        deactivate

    - name: Zip Pytube
      run: ls -al venv/lib/python3.11/site-packages




    # # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #     terraform_version: 1.6.1
    #     terraform_wrapper: false

    # # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    # - name: Terraform Init
    #   run: |
    #     cd backend
    #     terraform init

    # # Checks that all Terraform configuration files adhere to a canonical format
    # # - name: Terraform Format
    # #   run: |
    # #     cd backend
    # #     terraform fmt -check

    # # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #   run: |
    #     cd backend
    #     terraform plan -input=false

    #   # On push to "main", build or change infrastructure according to Terraform configuration files
    #   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   run: |
    #     cd backend
    #     terraform apply -auto-approve -input=false
